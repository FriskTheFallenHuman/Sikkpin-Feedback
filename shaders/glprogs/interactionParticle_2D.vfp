###==============================================================================
#	Feedback Interaction Particle 2D Fragment Program 
#
#	Simple Additive Lighting
###==============================================================================

!!ARBfp1.0 
OPTION ARB_precision_hint_fastest;

# Instruction Count: ALU: 97 TEX: 6 Total: 103

OUTPUT 	oColor 		= result.color;
ATTRIB 	vColor 		= fragment.color;
ATTRIB 	fPos 		= fragment.position;

ATTRIB 	lightProjTC = fragment.texcoord[0];
ATTRIB 	diffuseTC 	= fragment.texcoord[1];

PARAM 	nonPoT		= program.env[0];
PARAM 	invRes		= program.env[1];
PARAM 	lightColor 	= program.env[2];

PARAM	const		= { 1.0,  2.0,  4.0,  5.0  };
PARAM 	gamma		= { 2.4, 0.94786729857819905213270142180095, 0.41666666666666666666666666666667, 0.077399380804953560371517027863777 };

TEMP	diffuse, color; 
TEMP	atten, lightFall, lightProj;
TEMP	R1, R2;


# load falloff/projection maps
KIL 	lightProjTC;
TXP 	lightProj, lightProjTC, texture[0], 2D;
ADD_SAT lightFall, 1.0, -lightProjTC.z;
MUL 	lightFall, lightFall, lightFall;

# calculate attenuation
# MUL 	lightProj, lightProj, lightProj;
MUL 	atten, lightProj, lightFall;

# early out - attenuation 
DP3 	atten.w, atten, const.x;
SGE 	atten.w, 0.0, atten.w;
KIL 	-atten.w;

# load texture maps
TEX		diffuse, diffuseTC.xyxy, texture[3], 2D;

# sRGB -> Linear
MUL 	R1, diffuse, gamma.w;
ADD 	R2, diffuse, 0.055;
MUL 	R2, R2, gamma.y;
POW 	R2.x, R2.x, gamma.x;
POW 	R2.y, R2.y, gamma.x;
POW 	R2.z, R2.z, gamma.x;
SGE 	diffuse.xyz, 0.04045, diffuse;
CMP 	diffuse.xyz, -diffuse, R1, R2;

# final modulation
MUL 	color, diffuse, lightColor;
MUL 	color, color, atten;

# Linear -> sRGB
MUL 	R1, color, 12.92;
POW 	R2.x, color.x, gamma.z;
POW 	R2.y, color.y, gamma.z;
POW 	R2.z, color.z, gamma.z;
MAD 	R2, R2, 1.055, -0.055;
SGE 	color, 0.0031308, color;
CMP 	color.xyz, -color, R1, R2;

# modify by the vertex color
MUL 	oColor.xyz, color, vColor;
MOV 	oColor.w, diffuse.w;

END