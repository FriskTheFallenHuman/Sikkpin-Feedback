###==============================================================================
#	Feedback Interaction Particle 3D Vertex/Fragment Program 
#
#	Simple Additive Lighting
###==============================================================================
#
# --------------------------------------
# vertex attributes:
# 
# attrib[8]		= texture coordinates
# attrib[9]		= global tangent
# attrib[10]	= global bitangent
# attrib[11]	= global normal
#
# --------------------------------------
# environment variables:
#
# env[0]  		= 1.0 to _currentRender conversion
# env[1]  		= fragment.position to 0.0 - 1.0 conversion
# env[2]  		= diffuse light color
# env[3]  		= specular exponent scale/bias
# env[4]  		= localLightOrigin
# env[5]		= localViewOrigin
# env[6]		= lightProjection S
# env[7]		= lightProjection T
# env[8]		= lightFalloff S
# env[9]		= lightProjection Q
# env[10]		= bumpMatrix S
# env[11]		= bumpMatrix T
# env[12]		= diffuseMatrix S
# env[13]		= diffuseMatrix T
# env[14]		= specularMatrix S
# env[15]		= specularMatrix T
# env[16]		= modelMatrix[0]
# env[17]		= modelMatrix[1]
# env[18]		= modelMatrix[2]
# env[19]		= vertex color modulate/add
#
#--------------------------------------
# textures binds:
# 
# texture 0		= 2D/cubemap light projection texture
# texture 1		= 1D ambient light falloff texture
# texture 2		= per-surface normal map
# texture 3		= per-surface diffuse map
# texture 4		= per-surface specular map
# texture 5		= global ssao buffer
# texture 6		= aux interaction map 0
# texture 7		= aux interaction map 1
# texture 8		= aux interaction map 2
# texture 9		= aux interaction map 3
# texture 10	= aux interaction map 4
# texture 11	= aux interaction map 5
# texture 12	= aux interaction map 6
# texture 13	= aux interaction map 7
# texture 14	= aux interaction map 8
# texture 15	= aux interaction map 9
#
#--------------------------------------
###==============================================================================

!!ARBvp1.0
OPTION ARB_position_invariant;

# Instruction Count: 6

# light projection texture coordinates
DP4		result.texcoord[0].x, vertex.position, program.env[6];
DP4		result.texcoord[0].y, vertex.position, program.env[7];
DP4		result.texcoord[0].z, vertex.position, program.env[8];
DP4		result.texcoord[0].w, vertex.position, program.env[9];

# diffuse texture coordinates
DP4		result.texcoord[1].x, vertex.attrib[8], program.env[12];
DP4		result.texcoord[1].y, vertex.attrib[8], program.env[13];

# generate the vertex color, which can be 1.0, color, or 1.0 - color
# for 1.0 			: env[19].x =  0.0, env[19].y = 1.0
# for color			: env[19].x =  1.0, env[19].y = 0.0
# for 1.0 - color	: env[19].x = -1.0, env[19].y = 1.0
MAD		result.color, vertex.color, program.env[19].x, program.env[19].y;

END

#==================================================================================

!!ARBfp1.0 
OPTION ARB_precision_hint_fastest;

# Instruction Count: ALU: 97 TEX: 6 Total: 103

OUTPUT 	oColor 		= result.color;
ATTRIB 	vColor 		= fragment.color;
ATTRIB 	fPos 		= fragment.position;

ATTRIB 	lightProjTC = fragment.texcoord[0];
ATTRIB 	diffuseTC 	= fragment.texcoord[1];

PARAM 	nonPoT		= program.env[0];
PARAM 	invRes		= program.env[1];
PARAM 	lightColor 	= program.env[2];

PARAM	const		= { 1.0,  2.0,  4.0,  5.0  };
PARAM 	gamma		= { 2.4, 0.94786729857819905213270142180095, 0.41666666666666666666666666666667, 0.077399380804953560371517027863777 };

TEMP	diffuse, color; 
TEMP	atten, lightCube;
TEMP	R1, R2;


# calculate point light tc
MAD 	R1.xyz, lightProjTC, 2.0, -1.0;

# sample projection cube map
TEX 	lightCube, R1, texture[0], CUBE;

# calculate attenuation
DP3 	R1.w, R1, R1;
RSQ 	R1.w, R1.w;
RCP 	R1.w, R1.w;
ADD_SAT R1.w, 1.0, -R1.w;
MUL 	R1.w, R1.w, R1.w;
MUL 	atten, lightCube, R1.w;

# early out - attenuation
DP3 	atten.w, atten, const.x;
SGE 	atten.w, 0.0, atten.w;
KIL 	-atten.w;

# load texture maps
TEX		diffuse, diffuseTC, texture[3], 2D;

# sRGB -> Linear
MUL 	R1, diffuse, gamma.w;
ADD 	R2, diffuse, 0.055;
MUL 	R2, R2, gamma.y;
POW 	R2.x, R2.x, gamma.x;
POW 	R2.y, R2.y, gamma.x;
POW 	R2.z, R2.z, gamma.x;
SGE 	diffuse.xyz, 0.04045, diffuse;
CMP 	diffuse.xyz, -diffuse, R1, R2;

# final modulation
MUL 	color, diffuse, lightColor;
MUL 	color, color, atten;

# Linear -> sRGB
MUL 	R1, color, 12.92;
POW 	R2.x, color.x, gamma.z;
POW 	R2.y, color.y, gamma.z;
POW 	R2.z, color.z, gamma.z;
MAD 	R2, R2, 1.055, -0.055;
SGE 	color, 0.0031308, color;
CMP 	color.xyz, -color, R1, R2;

# modify by the vertex color
MUL 	oColor.xyz, color, vColor;
MOV 	oColor.w, diffuse.w;

END