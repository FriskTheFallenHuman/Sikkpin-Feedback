!!ARBvp1.0
OPTION ARB_position_invariant;

# input:
#-----------------------------------------
# texcoord[0]	= TEX0 texcoords
#
# local[0]		= scroll
# local[1]		= deform magnitude (1.0 is reasonable, 2.0 is twice as wavy, 0.5 is half as wavy, etc)
#
# output:
#-----------------------------------------
# texCoord[1]	= model surface texture coords
# texCoord[2]	= copied deform magnitude

PARAM	scroll	= program.local[0];
PARAM	scale	= program.local[1];

PARAM	vec		= { 1.0, 0.0, 0.0, 1.0 };

TEMP	R0, R1;


# texture 1 takes the texture coordinates and adds a scroll
ADD		result.texcoord[1], vertex.texcoord[0], scroll;

# texture 2 takes the deform magnitude and scales it by the projection distance
MOV		R0, vec;
DP4		R0.z, vertex.position, state.matrix.modelview.row[2];
DP4		R1.x, R0, state.matrix.projection.row[0];
DP4		R1.y, R0, state.matrix.projection.row[3];

# don't let the recip get near zero for polygons that cross the view plane
MAX		R1.y, R1.y, 1.0;
RCP		R1.y, R1.y;
MUL		R1.x, R1.x, R1.y;

# clamp the distance so the deformations don't get too wacky near the view
MIN		R1.x, R1.x, 0.02;

DP4		R1.x, vertex.position, state.matrix.mvp.row[3];
MAX 	R1.x, R1.x, 64.0;
RCP 	R1.x, R1.x;

MUL		result.texcoord[2], R1.x, scale;

END

#=====================================================================================

!!ARBfp1.0
OPTION ARB_precision_hint_fastest;

# texture 0 = _currentRender
# texture 1 = normal map that we will use to deform texture 0
#
# env[0] 	=  1.0 to _currentRender conversion
# env[1] 	=  fragment.position to 0.0 - 1.0 conversion

OUTPUT 	oColor 		= result.color;

ATTRIB	fPos		= fragment.position;
ATTRIB 	deformTC	= fragment.texcoord[1];
ATTRIB 	scale		= fragment.texcoord[2];

PARAM 	nonPoT		= program.env[0];
PARAM 	invRes		= program.env[1];

PARAM	const		= { 1.0, 2.0, 0.0, 0.0 };

TEMP	uv, normalVec, R0, R1, R2;


# calculate the screen texcoord in the 0.0 to 1.0 range
MUL 	uv, fPos.xyxy, nonPoT.zwzw;

# load the filtered normal map and convert to -1.0 to 1.0 range
TEX 	normalVec, deformTC, texture[1], 2D;
MAD 	normalVec.xyz, normalVec, const.y, -const.x;

# offset by the scaled normalVec and clamp it to 0.0 - 1.0
MAD_SAT	R1, normalVec, scale, uv;

# sample the RGB values along the displacements
TEX		oColor, R1, texture[0], 2D;

END